<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        nAUAB4NN8Yct/Pn4DcMVXneEJ91+9yOkWS6ylBI+kkAARxrhllX++O4bz2kuqUH0qThC0XkBARzR+JzD
        n209ReHslVa+aV2Yl/pcNP7YBgACOIKJK6WNeT9aZcr6+DjpjLgQdaDnkoAA4JCYAsTt1P5LPWGV/J02
        t/4AAcAR6AFfod4Rb1kx+gMCAAAEAAAIAAAQAAACAAAEAAAIAAAQAAAgAABAAACAAAAAAQAAAgAABAAA
        CAAAEAAAIAAAQAAAgAAAAAEAAAIAAAQAAAgAABAAACAAAEAAAIAAAAABAAACAAAEAAAIAAAQAAAgAABA
        AACAAAAAAQAAAgAABAAACAAAEAAAIAAABAAACAAAEAAAIAAAQAAAgAAAAAEAAAIAAAQAAAgAABAAACAA
        AEAAAIAAAAABAAACAAAEAAAIAAAQAAAgAABAAACAAAAAAQAAAgAABAAACAAAEAAAIAAAQAAAgAAAAAEA
        AAIAAAQAAAgAABAAACAAAEAAAAgAABAAACAAAEAAAIAAAAABAAACAAAEAAAIAAAQAAAgAABAAACAAAAA
        AQAAAgAABAAACAAAEAAAIAAAQAAAgAAAAAEAAAIAAAQAAAgAABAAACAAAEAAAIAAAAABAAACAAAEAAAI
        AAAQAAAgAABAAADwfyTYc/uVi1ICAAAAAElFTkSuQmCC
</value>
  </data>
</root>